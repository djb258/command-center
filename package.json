{
  "name": "cursor-blueprint-enforcer",
  "version": "1.0.0",
  "description": "Blueprint enforcement system with Firebase, BigQuery, and Neon integration",
  "main": "index.js",
  "scripts": {
    "build": "tsc",
    "dev": "tsx",
    "start": "node dist/",
    "test": "jest",
    "test:watch": "jest --watch",
    "lint": "eslint . --ext .ts",
    "lint:fix": "eslint . --ext .ts --fix",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "validate": "npm run lint && npm run test && npm run build",
    "prepare": "husky install",
    "generate-summary": "tsx scripts/generate_summary.ts",
    "mindpal": "tsx scripts/mindpal_integration.ts",
    "mindpal:setup": "ts-node scripts/mindpal_integration.ts setup",
    "mindpal:health": "ts-node scripts/mindpal_integration.ts health",
    "mindpal:validate": "ts-node scripts/mindpal_integration.ts validate",
    "deerflow": "tsx scripts/deerflow_integration.ts",
    "deerflow:setup": "ts-node scripts/deerflow_integration.ts setup",
    "deerflow:health": "ts-node scripts/deerflow_integration.ts health",
    "deerflow:workflow": "ts-node scripts/deerflow_integration.ts workflow",
    "render": "tsx scripts/render_integration.ts",
    "render:deploy": "ts-node scripts/render_integration.ts deploy",
    "render:health": "ts-node scripts/render_integration.ts health",
    "render:services": "ts-node scripts/render_integration.ts services",
    "make": "tsx scripts/make_integration.ts",
    "make:setup": "ts-node scripts/make_integration.ts setup",
    "make:health": "ts-node scripts/make_integration.ts health",
    "make:scenario": "ts-node scripts/make_integration.ts scenario",
    "make:webhook": "ts-node scripts/make_integration.ts webhook",
    "firebase": "tsx scripts/firebase_push.ts",
    "bigquery": "tsx scripts/bigquery_ingest.ts",
    "neon": "tsx scripts/neon_sync.ts",
    "sync-machines": "tsx scripts/sync_all_machines.ts",
    "sync-cursor": "tsx scripts/cursor_config_sync.ts",
    "sync-tools": "tsx scripts/tool_sync_manager.ts",
    "backup-config": "tsx scripts/sync_all_machines.ts backup",
    "restore-config": "tsx scripts/sync_all_machines.ts restore",
    "validate-sync": "tsx scripts/sync_all_machines.ts validate",
    "google": "tsx scripts/google_workspace_integration.ts",
    "google:auth": "tsx scripts/google_workspace_integration.ts auth",
    "google:health": "tsx scripts/google_workspace_integration.ts health",
    "google:validate": "tsx scripts/google_workspace_integration.ts validate",
    "google:drive": "tsx scripts/google_workspace_integration.ts drive",
    "google:docs": "tsx scripts/google_workspace_integration.ts docs",
    "google:sheets": "tsx scripts/google_workspace_integration.ts sheets",
    "google:calendar": "tsx scripts/google_workspace_integration.ts calendar",
    "gui": "python scripts/sync_gui.py",
    "gui:windows": "scripts/sync_gui.bat",
    "gui:unix": "./scripts/sync_gui.sh",
    "update-tools": "tsx scripts/weekly_tool_update.ts",
    "setup-weekly-updates": "powershell -ExecutionPolicy Bypass -File scripts/setup_weekly_updates.ps1",
    "remove-weekly-updates": "powershell -ExecutionPolicy Bypass -File scripts/setup_weekly_updates.ps1 -Remove",
    "update-tools:manual": "npm run update-tools",
    "update-tools:schedule": "npm run setup-weekly-updates",
    "env:setup": "tsx scripts/env_manager.ts setup",
    "env:validate": "tsx scripts/env_manager.ts validate",
    "env:list": "tsx scripts/env_manager.ts list",
    "env:generate-secrets": "tsx scripts/env_manager.ts generate-secrets",
    "docker:dev": "docker-compose -f docker-compose.dev.yml up -d",
    "docker:dev:down": "docker-compose -f docker-compose.dev.yml down",
    "docker:dev:logs": "docker-compose -f docker-compose.dev.yml logs -f",
    "docker:dev:clean": "docker-compose -f docker-compose.dev.yml down -v --remove-orphans",
    "backup:start": "tsx scripts/auto_backup.ts start",
    "backup:watch": "tsx scripts/auto_backup.ts watch",
    "backup:now": "tsx scripts/auto_backup.ts now",
    "backup:status": "tsx scripts/auto_backup.ts status",
    "remind:add": "tsx scripts/priority_reminders.ts add",
    "remind:api": "tsx scripts/priority_reminders.ts api",
    "remind:tool": "tsx scripts/priority_reminders.ts tool",
    "remind:done": "tsx scripts/priority_reminders.ts done",
    "remind:list": "tsx scripts/priority_reminders.ts list",
    "remind:check": "tsx scripts/priority_reminders.ts check",
    "remind:suggest": "tsx scripts/priority_reminders.ts suggest",
    "remind:urgent": "tsx scripts/priority_reminders.ts urgent",
    "remind:cleanup": "tsx scripts/priority_reminders.ts cleanup",
    "abacus:setup": "tsx scripts/abacus_ai_integration.ts setup",
    "abacus:test": "tsx scripts/abacus_ai_integration.ts test",
    "abacus:validate": "tsx scripts/abacus_ai_integration.ts validate",
    "apify:setup": "tsx scripts/apify_integration.ts setup",
    "apify:test": "tsx scripts/apify_integration.ts test",
    "apify:user": "tsx scripts/apify_integration.ts user",
    "apify:actors": "tsx scripts/apify_integration.ts actors",
    "apify:validate": "tsx scripts/apify_integration.ts validate",
    "genspark:setup": "tsx scripts/genspark_integration.ts setup",
    "genspark:test": "tsx scripts/genspark_integration.ts test",
    "genspark:validate": "tsx scripts/genspark_integration.ts validate",
    "rtrvr:setup": "tsx scripts/rtrvr_integration.ts setup",
    "rtrvr:test": "tsx scripts/rtrvr_integration.ts test",
    "rtrvr:account": "tsx scripts/rtrvr_integration.ts account",
    "rtrvr:indexes": "tsx scripts/rtrvr_integration.ts indexes",
    "rtrvr:search": "tsx scripts/rtrvr_integration.ts search",
    "rtrvr:ask": "tsx scripts/rtrvr_integration.ts ask",
    "rtrvr:validate": "tsx scripts/rtrvr_integration.ts validate",
    "browserless:setup": "tsx scripts/browserless_integration.ts setup",
    "browserless:test": "tsx scripts/browserless_integration.ts test",
    "browserless:account": "tsx scripts/browserless_integration.ts account",
    "browserless:screenshot": "tsx scripts/browserless_integration.ts screenshot",
    "browserless:pdf": "tsx scripts/browserless_integration.ts pdf",
    "browserless:scrape": "tsx scripts/browserless_integration.ts scrape",
    "browserless:validate": "tsx scripts/browserless_integration.ts validate",
    "validate:barton-doctrine": "tsx scripts/barton_doctrine_validator.ts",
    "barton:enforce": "tsx scripts/barton_doctrine_validator.ts enforce",
    "barton:report": "tsx scripts/barton_doctrine_validator.ts report",
    "barton:strict": "tsx scripts/barton_doctrine_validator.ts strict",
    "barton:repair": "tsx scripts/barton_doctrine_validator.ts repair",
    "barton:status": "tsx scripts/barton_doctrine_validator.ts status",
    "generate:tool": "tsx scripts/generate_compliant_tool.ts",
    "enforce:mandatory": "tsx scripts/enforce_mandatory_compliance.ts",
    "orchestrate": "tsx scripts/render_deerflow_mindpal_example.ts",
    "orchestrate:health": "tsx scripts/test_render_deerflow_mindpal.ts health",
    "orchestrate:test": "tsx scripts/test_render_deerflow_mindpal.ts quick",
    "orchestrate:full": "tsx scripts/test_render_deerflow_mindpal.ts all",
    "test:render-deerflow-mindpal": "tsx scripts/test_render_deerflow_mindpal.ts",
    "deerflow-orchestrate": "tsx scripts/render_deerflow_mindpal_firebase_orchestrator.ts",
    "deerflow-orchestrate:test": "tsx scripts/test_firebase_whiteboard_orchestrator.ts",
    "deerflow-orchestrate:quick": "tsx scripts/test_firebase_whiteboard_orchestrator.ts quick",
    "deerflow-live-test": "tsx scripts/test_deerflow_render_starter_live.ts",
    "deerflow-simple-orchestrate": "tsx scripts/test_simple_orchestration.ts",
    "deerflow-config": "tsx scripts/configure_env.ts",
    "deerflow-config:check": "tsx scripts/configure_env.ts check",
    "firebase:update-config": "tsx scripts/update_firebase_config.ts",
    "render-db:orchestrate": "tsx scripts/render_db_orchestrator.ts",
    "render-db:test": "tsx scripts/test_render_db_orchestrator.ts",
    "render-db:health": "tsx scripts/test_render_db_orchestrator.ts health",
    "render-db:endpoints": "tsx scripts/test_render_db_orchestrator.ts endpoints",
    "render-db:deploy": "tsx scripts/render_db_orchestrator.ts deploy"
  },
  "lint-staged": {
    "*.ts": [
      "eslint --fix",
      "prettier --write",
      "jest --bail --findRelatedTests"
    ],
    "*.{js,json,md}": [
      "prettier --write"
    ]
  },
  "keywords": [
    "blueprint",
    "enforcement",
    "firebase",
    "bigquery",
    "neon"
  ],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "@google-cloud/bigquery": "^6.2.0",
    "axios": "^1.6.0",
    "dotenv": "^16.3.1",
    "firebase-admin": "^13.4.0",
    "googleapis": "^128.0.0",
    "pg": "^8.11.3",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@types/chokidar": "^1.7.5",
    "@types/jest": "^29.5.6",
    "@types/node": "^20.8.0",
    "@types/pg": "^8.10.7",
    "@typescript-eslint/eslint-plugin": "^6.9.0",
    "@typescript-eslint/parser": "^6.9.0",
    "chokidar": "^4.0.3",
    "eslint": "^8.52.0",
    "husky": "^8.0.3",
    "jest": "^29.7.0",
    "lint-staged": "^15.2.0",
    "prettier": "^3.0.3",
    "ts-jest": "^29.1.1",
    "ts-node": "^10.9.1",
    "tsx": "^4.20.3",
    "typescript": "^5.2.2"
  }
}
